<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Will Xiao</title>
  
  <subtitle>分享是最好的学习</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://willxiao90.github.io/"/>
  <updated>2020-07-06T10:17:22.704Z</updated>
  <id>https://willxiao90.github.io/</id>
  
  <author>
    <name>Will Xiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue 与 React 的区别</title>
    <link href="https://willxiao90.github.io/2020/06/29/Vue%20%E4%B8%8E%20React%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://willxiao90.github.io/2020/06/29/Vue%20%E4%B8%8E%20React%20%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-06-29T10:19:26.000Z</published>
    <updated>2020-07-06T10:17:22.704Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue 与 React 有什么区别？</p></blockquote><p>这是前端开发同学面试时经常遇到的问题。</p><p>我也不例外，我最开始接触的是 React，对 Vue 的理解一直比较片面。感觉 Vue 要学很多 html 指令，很不习惯，也没觉得 Vue 比 React 有什么优势。</p><p>直到现在，使用了 Vue 一年之后，对 Vue 有了更多感受，也消除了一些刻板印象。</p><p>首先，这两个框架都是非常优秀的单页应用（SPA）开发框架，它们其实非常相似，都有以下特性：</p><ol><li>响应式（Reactive）。两个框架都是一种类似 VM 的架构，将状态从视图层分离出来，开发者只需要关注业务逻辑，不需要直接操作 DOM 。当应用发生改变时，我们只需要更新状态即可，框架会自动帮我们重新渲染页面。</li><li>组件化（Composable）。一个页面，可以拆分成一棵嵌套的组件树，我们只需要开发一个个组件即可，同一个组件可以在多个地方使用，这样就提升了代码的复用性和可维护性。</li><li>使用了 Virtual DOM。框架在操作真实 DOM 之前，会先在内存中生成虚拟 DOM，最后再批量操作真实 DOM，以提高性能。</li></ol><p>我个人理解，它们最大的差别是响应式原理不同，组件的定义方式和 state 状态管理也有一些差别。</p><h2 id="一、响应式原理不同"><a href="#一、响应式原理不同" class="headerlink" title="一、响应式原理不同"></a>一、响应式原理不同</h2><p>Vue 的响应式，是使用观察者模式实现的。Vue 会遍历 data 数据对象，使用 Object.defineProperty() 将每个属性都转换为 getter/setter。</p><p>每个 Vue 组件实例都对应一个  watcher  实例，在组件渲染（render）过程中时，watcher 实例会记录哪些子组件用到了（getter）哪些数据属性。当数据属性发生改变时，会触发 setter 方法，watcher 实例会通知所有用到了这个数据属性的子组件，调用该子组件的 updateComponent 方法更新组件。</p><p><img src="https://cn.vuejs.org/images/data.png" alt=""></p><p>例如，一个 TodoList 组件，代码结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">todo-items</span> <span class="attr">:items</span>=<span class="string">"items"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add-todo</span> <span class="attr">v-model</span>=<span class="string">"text"</span> <span class="attr">:count</span>=<span class="string">"items.length + 1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这个组件渲染过程中，watcher 会记录 TodoItems 子组件用到了 items 数据属性，AddTodo 子组件用到了 text 和 items 数据属性。</p><p>当 text 数据属性发生改变时，watcher 就会通知用到了 text 数据属性的所有子组件，这里只有 AddTodo 一个组件，所以 Vue 就只更新 AddTodo 这一个组件。</p><p>同理，当 items 数据属性发生改变时，Vue 就会更新 TodoItems 和 AddTodo 两个组件。</p><hr><p>React 的响应式，是使用 diff 算法实现的。React 在 state 或 props 改变时，会调用 render() 方法，生成一个虚拟 DOM 树，React 会将这棵树与上一次生成的树进行比较，找出其中的差异，并更新差异的部分。</p><p>比较两棵树，找出其中的差异，并生产一个做小操作数。这个算法的复杂度比较高，是 O(n 3 )，React 为了提高性能， 提出了一套复杂度为 O(n) 的优化算法， 这个算法有两个重要的假设：</p><ol><li>两个不同类型的元素会产生出不同的树。当根节点元素类型发生改变时，React 会销毁旧节点创建新节点。比如当一个元素从 <code>&lt;Button&gt;</code> 变成 <code>&lt;div&gt;</code>，或者 <code>&lt;ComponentA&gt;</code> 变成 <code>&lt;ComponentB&gt;</code>。当元素类型相同时，React 会保留 DOM 节点，仅比较并更新有改变的属性。如果元素有子节点，React 会递归比较  子节点。</li><li>当元素类型相同时，开发者可以使用 key 属性来标识元素的唯一性。比如一个列表， 有多个相同类型的子节点，当子节点顺序发生改变是，如果没有一个唯一标识，就有可能产生比较多的操作数。React 引入 key 属性作为唯一标识，就是为了解决这个问题。</li></ol><p>关于 React 的  diff 算法，官方文档写的很清楚 ，我就不多说了。 详情请看：<a href="https://zh-hans.reactjs.org/docs/reconciliation.html" target="_blank" rel="noopener">https://zh-hans.reactjs.org/docs/reconciliation.html</a></p><h2 id="二、Vue-推荐使用-template-方式定义组件，React-推荐使用-JSX"><a href="#二、Vue-推荐使用-template-方式定义组件，React-推荐使用-JSX" class="headerlink" title=" 二、Vue 推荐使用 template 方式定义组件，React 推荐使用 JSX"></a> 二、Vue 推荐使用 template 方式定义组件，React 推荐使用 JSX</h2><p>Vue 推荐使用 template 的方式定义组件，因为这样更接近原生 html，可以在不破坏原有 html 代码的基础上引入 Vue 的能力。Vue 的组件也  参考了一些 Web Component 的规范，Vue 的组件可以很容易打包成 Web Component。</p><p>React 推荐使用 JSX，JSX 是使用 JS 的语法来编写 html 代码，所以一些流程控制，数据绑定也会更加方便些。JSX  不依赖模版，所以出现了 React Native 这样的  跨平台  框架。</p><p>事实上 Vue 也提供了 JSX 的支持，不过 Vue 更推荐 template 的方式。</p><h2 id="三、Vue-可以直接修改状态，React-必须通过-setState-更新状态"><a href="#三、Vue-可以直接修改状态，React-必须通过-setState-更新状态" class="headerlink" title="三、Vue 可以直接修改状态，React 必须通过 setState() 更新状态"></a>三、Vue 可以直接修改状态，React 必须通过 setState() 更新状态</h2><p>这个区别其实也是因为它们的响应式原理不同。</p><p>Vue 数据属性变更时，会自动通知所有用到了这个属性的子组件，调用它们的 updateComponent 方法更新组件，所以 Vue 直接修改数据属性组件也会正确更新。</p><p>React 调用 setState() 方法，组件会自动执行 render() 方法重新渲染。但是直接修改 state，不会调用 render() 方法，组件不会更新，除非调用 forceUpdate() 强制更新组件。</p><h2 id="四、Vue-支持双向数据绑定，React-只允许单向数据流"><a href="#四、Vue-支持双向数据绑定，React-只允许单向数据流" class="headerlink" title="四、Vue 支持双向数据绑定，React 只允许单向数据流"></a>四、Vue 支持双向数据绑定，React 只允许单向数据流</h2><p>Vue 提供了 v-model 指令，可以进行双向数据绑定。不过 v-model 其实只是一个语法糖，它的本质是  绑定 value 属性，并监听 input 事件，当 input 有新的  内容时更新 value 属性。</p><p>当 v-model  绑定一个对象时，Vue 允许子组件直接修改对象属性，得益于 Vue 的响应式原理，父组件中的用到对象属性的地方也会自动更新。</p><p>例如，有一个很长  的表单，字段  实在太多了，我们就需要把这个组件拆分为更小的子组件，这个时候，我们可以利用状态提升的技巧， 把状态都  放在父组件里面，然后把父组件的状态对象使用 v-model 指令绑定给子组件，在子组件中就可以直接修改父组件的对象  属性。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">base-info</span> <span class="attr">v-model</span>=<span class="string">"form"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">company-info</span> <span class="attr">v-model</span>=<span class="string">"form.companyInfo"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">education-info</span> <span class="attr">v-model</span>=<span class="string">"form.educationInfo"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    data() &#123;</span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line">        form: &#123;</span><br><span class="line"><span class="actionscript">          name: <span class="string">''</span>,</span></span><br><span class="line">          gender: 0,</span><br><span class="line">          age: 18,</span><br><span class="line"><span class="actionscript">          email: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          phone: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          address1: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">          address2: <span class="string">''</span>,</span></span><br><span class="line">          companyInfo: &#123;</span><br><span class="line"><span class="actionscript">            name: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            tel: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            address: <span class="string">''</span></span></span><br><span class="line">          &#125;,</span><br><span class="line">          educationInfo: &#123;</span><br><span class="line"><span class="actionscript">            college: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            profession: <span class="string">''</span>,</span></span><br><span class="line"><span class="actionscript">            graduateAt: <span class="string">''</span></span></span><br><span class="line">          &#125;</span><br><span class="line">          ...</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p>React 只允许单向数据流，React 认为这样虽然麻烦一点儿，但是显式声明的方法更有助于人们理解程序的运作方式，不容易引入 bug。</p><p>上面的例子，如果使用 React 的写法，需要将修改父组件状态的方法传递给子组件，在子组件中调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      name: <span class="string">''</span>,</span><br><span class="line">      gender: <span class="number">1</span>,</span><br><span class="line">      phone: <span class="string">''</span>,</span><br><span class="line">      email: <span class="string">''</span>,</span><br><span class="line">      address1: <span class="string">''</span>,</span><br><span class="line">      address2: <span class="string">''</span>,</span><br><span class="line">      companyInfo: &#123;</span><br><span class="line">        name: <span class="string">''</span>,</span><br><span class="line">        tel: <span class="string">''</span>,</span><br><span class="line">        address: <span class="string">''</span></span><br><span class="line">      &#125;,</span><br><span class="line">      educationInfo: &#123;</span><br><span class="line">        college: <span class="string">''</span>,</span><br><span class="line">        profession: <span class="string">''</span>,</span><br><span class="line">        graduateAt: <span class="string">''</span></span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateBaseInfo(prop, value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      &#123;<span class="attr">prop</span>: value&#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateCompanyInfo(prop, value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      companyInfo: &#123;</span><br><span class="line">        ...state.companyInfo,</span><br><span class="line">        &#123;<span class="attr">prop</span>: value&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  updateEducationInfo(prop, value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(<span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      educationInfo: &#123;</span><br><span class="line">        ...state.educationInfo,</span><br><span class="line">        &#123;<span class="attr">prop</span>: value&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;form&#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;form&gt;</span><br><span class="line">        &lt;baseInfo data=&#123;form&#125; update=&#123;updateBaseInfo&#125; /&gt;</span><br><span class="line">        &lt;companyInfo data=&#123;form.companyInfo&#125; update=&#123;updateCompanyInfo&#125; /&gt;</span><br><span class="line">        &lt;educationInfo data=&#123;form.educationInfo&#125; update=&#123;updateEducationInfo&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/form&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="五、React-推荐使用不可变的数据"><a href="#五、React-推荐使用不可变的数据" class="headerlink" title="五、React 推荐使用不可变的数据"></a>五、React 推荐使用不可变的数据</h2><p>所谓不可变的数据，就是  当我们要改变一个  数据对象时，不要直接修改原数据对象，而是返回一个新的数据对象。比如使用 Object.assign() 方法修改数据属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  fontSize: <span class="number">14</span>,</span><br><span class="line">  color: <span class="string">"black"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newData = <span class="built_in">Object</span>.assign(&#123;&#125;, data, &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;);</span><br></pre></td></tr></table></figure><p>之所以推荐使用不可变的数据，一个原因  是使用不可变的数据，可以更容易的实现“时间旅行 ”功能。但是更重要的一个  原因是可以更容易的实现 pure component。</p><p> 刚才  讲过 React 的响应式原理，当一个组件的状态发生改变时，React 会重新调用 render() 方法，比较生成的 VDOM 的差别。如果一个子组件的 proos 和 state 都没有改变，React  仍然需要  进行一次  对比，这个情况就  有点儿浪费了。所以 React 提供了 shouldComponentUpdate() 生命周期函数， 允许开发者判断什么时候应该更新组件，比如当组件的 props 和 state 都没有改变的时候，shouldComponentUpdate 就可以返回 false，那么 React 就不会再去比较 VDOM 的差异了。</p><p>React.PureComponent 类，实现了 shouldComponentUpdate 方法，会对 props 和 state 进行浅比较，如果没有变化，就返回 false 跳过组件更新。但是它只进行浅比较，所以如果直接修改了 props 或 state 的属性，shouldComponentUpdate 方法还是返回 false，就  漏掉了这次更新。所以这种情况下，推荐使用不可变的数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Vue 与 React 有什么区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是前端开发同学面试时经常遇到的问题。&lt;/p&gt;
&lt;p&gt;我也不例外，我最开始接触的是 React，对 Vue 的理解一直比较片面。感觉 Vue 要学很多 html 指令，
      
    
    </summary>
    
    
    
      <category term="vue, react" scheme="https://willxiao90.github.io/tags/vue-react/"/>
    
  </entry>
  
</feed>
