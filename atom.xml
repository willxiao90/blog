<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Will Xiao</title>
  
  <subtitle>分享是最好的学习</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://willxiao90.github.io/"/>
  <updated>2024-07-21T02:38:05.765Z</updated>
  <id>https://willxiao90.github.io/</id>
  
  <author>
    <name>Will Xiao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>命令模式实现 undo &amp; redo</title>
    <link href="https://willxiao90.github.io/2024/07/20/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%20undo%20&amp;%20redo/"/>
    <id>https://willxiao90.github.io/2024/07/20/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0%20undo%20&amp;%20redo/</id>
    <published>2024-07-20T20:14:15.000Z</published>
    <updated>2024-07-21T02:38:05.765Z</updated>
    
    <content type="html"><![CDATA[<p>前端 undo &amp; redo 功能是非常常见的，通常会使用命令模式来实现。</p><p>下面以一个低代码编辑器的例子，来介绍 JavaScript 是如何使用命令模式来实现 undo &amp; redo 功能的。</p><p>首先，我们来看一下命令模式的结构示意图。</p><p><img src="/blog/images/cc2f4b0283e74a8fa5cdaeb85c2837d1.png" alt="alt text"></p><p>在命令模式中，关键是定义了一个 Command 接口，它有 execute 和 undo 两个方法，具体的命令类都需要实现这两个方法。调用者（Invoker）在调用命令的时候，只需要执行命令对象的 execute 和 undo 方法即可，而不用关心这两个方法具体做了什么。实际上这两方法的具体实现，通常都是在接收者（Receiver）中，命令类中通常有一个接收者实例，命令类只需要调用接收者实例方法即可。</p><p>OK，我们来看一下，我们的低代码编辑器的状态库（简化版的）。它是使用 zustand 定义的，它有一个组件列表 componentList，以及相关的3个方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">"zustand/vanilla"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(<span class="function">(<span class="params">set</span>) =&gt;</span> (&#123;</span><br><span class="line">  componentList: [], <span class="comment">// 组件列表</span></span><br><span class="line">  <span class="comment">// 添加组件</span></span><br><span class="line">  addComponent: <span class="function">(<span class="params">comp</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">set</span>((state) =&gt; (&#123; componentList: [...state.componentList, comp] &#125;)),</span><br><span class="line">  <span class="comment">// 删除组件</span></span><br><span class="line">  removeComponent: <span class="function">(<span class="params">comp</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">set</span>((state) =&gt; (&#123;</span><br><span class="line">      componentList: state.componentList.filter(<span class="function">(<span class="params">v</span>) =&gt;</span> v.id !== comp.id),</span><br><span class="line">    &#125;)),</span><br><span class="line">  <span class="comment">// 更新组件属性</span></span><br><span class="line">  updateComponentProps: <span class="function">(<span class="params">comp, newProps</span>) =&gt;</span></span><br><span class="line">    <span class="keyword">set</span>((state) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> index = state.componentList.findIndex(<span class="function">(<span class="params">v</span>) =&gt;</span> v.id === comp.id);</span><br><span class="line">      <span class="keyword">if</span> (index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> list = [...state.componentList];</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          componentList: [</span><br><span class="line">            ...list.slice(<span class="number">0</span>, index),</span><br><span class="line">            &#123; ...comp, <span class="attr">props</span>: newProps &#125;,</span><br><span class="line">            ...list.slice(index + <span class="number">1</span>),</span><br><span class="line">          ],</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">&#125;));</span><br><span class="line"><span class="comment">// const &#123; getState, setState, subscribe, getInitialState &#125; = store;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br></pre></td></tr></table></figure><p>接下来，我们看一下相关命令类的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 命令基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">  execute() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"未重写 execute 方法！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"未重写 undo 方法！"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AddComponentCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  editorStore; <span class="comment">// 状态库（它充当 Receiver）</span></span><br><span class="line">  comp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(editorStore, comp) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.editorStore = editorStore;</span><br><span class="line">    <span class="keyword">this</span>.comp = comp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execute(comp) &#123;</span><br><span class="line">    <span class="keyword">this</span>.editorStore.getState().addComponent(<span class="keyword">this</span>.comp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.editorStore.getState().removeComponent(<span class="keyword">this</span>.comp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoveComponentCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  editorStore;</span><br><span class="line">  comp;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(editorStore, comp) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.editorStore = editorStore;</span><br><span class="line">    <span class="keyword">this</span>.comp = comp;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execute() &#123;</span><br><span class="line">    <span class="keyword">this</span>.editorStore.getState().removeComponent(<span class="keyword">this</span>.comp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">this</span>.editorStore.getState().addComponent(<span class="keyword">this</span>.comp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">UpdateComponentPropsCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">  editorStore;</span><br><span class="line">  comp;</span><br><span class="line">  newProps;</span><br><span class="line">  prevProps; <span class="comment">// 保存之前的属性</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(editorStore, comp, newProps) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="keyword">this</span>.editorStore = editorStore;</span><br><span class="line">    <span class="keyword">this</span>.comp = comp;</span><br><span class="line">    <span class="keyword">this</span>.newProps = newProps;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execute() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; updateComponentProps, componentList &#125; = <span class="keyword">this</span>.editorStore.getState();</span><br><span class="line">    <span class="keyword">this</span>.prevProps = componentList.find(<span class="function">(<span class="params">v</span>) =&gt;</span> v.id === <span class="keyword">this</span>.comp.id)?.props;</span><br><span class="line">    updateComponentProps(<span class="keyword">this</span>.comp, <span class="keyword">this</span>.newProps);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; updateComponentProps &#125; = <span class="keyword">this</span>.editorStore.getState();</span><br><span class="line">    updateComponentProps(<span class="keyword">this</span>.comp, <span class="keyword">this</span>.prevProps);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们实现了 AddComponentCommand、RemoveComponentCommand 和 UpdateComponentPropsCommand 3个命令类，在我们的命令类中都有一个 editorStore 属性，它在这里充当了 Receiver 接收者，因为编辑器相关操作我们都定义在状态库中。</p><p>其中 AddComponentCommand 和 RemoveComponentCommand 相对比较简单，有直接的操作可以实现撤销。UpdateComponentPropsCommand 就稍微复杂一点，我们更新了属性之后，没有一个直接的操作可以撤销修改，这种情况我们通常需要增加一个属性，记录修改之前的状态，用于实现撤销功能，在 UpdateComponentPropsCommand 中就是 prevProps。</p><p>到这里，我们的命令类都已经实现了，要实现 undo 和 redo 功能，通常我们还需要实现一个命令管理类，它需要实现 execute、undo 和 redo 三个方法。它的具体实现多种方法，我们这里使用两个栈（Stack）来实现，具体代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line">  undoStack = []; <span class="comment">// 撤销栈</span></span><br><span class="line">  redoStack = []; <span class="comment">// 重做栈</span></span><br><span class="line"></span><br><span class="line">  execute(command) &#123;</span><br><span class="line">    command.execute();</span><br><span class="line">    <span class="keyword">this</span>.undoStack.push(command);</span><br><span class="line">    <span class="keyword">this</span>.redoStack = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">this</span>.undoStack.pop();</span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">      command.undo();</span><br><span class="line">      <span class="keyword">this</span>.redoStack.push(command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redo() &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">this</span>.redoStack.pop();</span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">      command.execute();</span><br><span class="line">      <span class="keyword">this</span>.undoStack.push(command);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> CommandManager();</span><br></pre></td></tr></table></figure><p>有了这些，接下来我们可以进入测试环节了，下面是我们的测试代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"./store/editorStore"</span>;</span><br><span class="line"><span class="keyword">import</span> cmdManager <span class="keyword">from</span> <span class="string">"./commands/cmdManager"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实时打印组件列表</span></span><br><span class="line">store.subscribe(<span class="function">(<span class="params">state</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(state.componentList))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comp1 = &#123;</span><br><span class="line">  id: <span class="number">101</span>,</span><br><span class="line">  componentName: <span class="string">"Comp1"</span>,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  children: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> comp2 = &#123;</span><br><span class="line">  id: <span class="number">102</span>,</span><br><span class="line">  componentName: <span class="string">"Comp2"</span>,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  children: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">cmdManager.execute(<span class="keyword">new</span> AddComponentCommand(store, comp1));</span><br><span class="line">cmdManager.execute(<span class="keyword">new</span> AddComponentCommand(store, comp2));</span><br><span class="line">cmdManager.undo();</span><br><span class="line">cmdManager.redo();</span><br><span class="line"></span><br><span class="line">cmdManager.execute(<span class="keyword">new</span> RemoveComponentCommand(store, comp1));</span><br><span class="line">cmdManager.undo();</span><br><span class="line"></span><br><span class="line">cmdManager.execute(</span><br><span class="line">  <span class="keyword">new</span> UpdateComponentPropsCommand(store, comp1, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">);</span><br><span class="line">cmdManager.undo();</span><br></pre></td></tr></table></figure><p>测试结果如下，说明我们的代码正常工作了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;,&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;,&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;,&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;,&#123;"id":101,"componentName":"Comp1","props":&#123;"visible":true&#125;,"children":null&#125;]</span></span><br><span class="line"><span class="comment">// [&#123;"id":102,"componentName":"Comp2","props":&#123;&#125;,"children":null&#125;,&#123;"id":101,"componentName":"Comp1","props":&#123;&#125;,"children":null&#125;]</span></span><br></pre></td></tr></table></figure><p>&#x20;至此，我们已经完成了完整的第一个版本了。但是代码还有优化的空间，我们继续改进一下。</p><p>第一点，执行命令的地方，要手动 new 命令类，传入 store 状态库，有较多的模板代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cmdManager.execute(<span class="keyword">new</span> AddComponentCommand(store, comp1));</span><br><span class="line">cmdManager.execute(<span class="keyword">new</span> AddComponentCommand(store, comp2));</span><br><span class="line">cmdManager.undo();</span><br><span class="line">cmdManager.redo();</span><br></pre></td></tr></table></figure><p>我们可以参考 js 原生方法 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand" target="_blank" rel="noopener">document.execCommand</a> 实现一个 executeCommand () 方法，这样执行命令就变成了 executeCommand(commandName, …args) 这样，更为方便。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cmdManager <span class="keyword">from</span> <span class="string">"./cmdManager"</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  AddComponentCommand,</span><br><span class="line">  RemoveComponentCommand,</span><br><span class="line">  UpdateComponentPropsCommand,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">"./index"</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">"../store/editorStore"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> commondActions = &#123;</span><br><span class="line">  addComponent(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> cmd = <span class="keyword">new</span> AddComponentCommand(store, ...args);</span><br><span class="line">    cmdManager.execute(cmd);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  removeComponent(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> cmd = <span class="keyword">new</span> RemoveComponentCommand(store, ...args);</span><br><span class="line">    cmdManager.execute(cmd);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  updateComponentProps(...args) &#123;</span><br><span class="line">    <span class="keyword">const</span> cmd = <span class="keyword">new</span> UpdateComponentPropsCommand(store, ...args);</span><br><span class="line">    cmdManager.execute(cmd);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    cmdManager.undo();</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  redo() &#123;</span><br><span class="line">    cmdManager.redo();</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> executeCommand = <span class="function">(<span class="params">cmdName, ...args</span>) =&gt;</span> &#123;</span><br><span class="line">  commondActions[cmdName](...args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> executeCommand;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">store.subscribe(<span class="function">(<span class="params">state</span>) =&gt;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(state.componentList))</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comp1 = &#123;</span><br><span class="line">  id: <span class="number">101</span>,</span><br><span class="line">  componentName: <span class="string">"Comp1"</span>,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  children: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> comp2 = &#123;</span><br><span class="line">  id: <span class="number">102</span>,</span><br><span class="line">  componentName: <span class="string">"Comp2"</span>,</span><br><span class="line">  props: &#123;&#125;,</span><br><span class="line">  children: <span class="literal">null</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">executeCommand(<span class="string">"addComponent"</span>, comp1);</span><br><span class="line">executeCommand(<span class="string">"addComponent"</span>, comp2);</span><br><span class="line">executeCommand(<span class="string">"undo"</span>);</span><br><span class="line">executeCommand(<span class="string">"redo"</span>);</span><br><span class="line"></span><br><span class="line">executeCommand(<span class="string">"removeComponent"</span>, comp1);</span><br><span class="line">executeCommand(<span class="string">"undo"</span>);</span><br><span class="line"></span><br><span class="line">executeCommand(<span class="string">"updateComponentProps"</span>, comp1, &#123; <span class="attr">visible</span>: <span class="literal">true</span> &#125;);</span><br><span class="line">executeCommand(<span class="string">"undo"</span>);</span><br></pre></td></tr></table></figure><p>第二点，CommandManager 其实使用一个栈（Stack）加上指针也可以实现，我们参考了网上的代码（<a href="https://developer.s24.com/blog/js-command-pattern-for-undo-and-redo.html" target="_blank" rel="noopener">JavaScript command pattern for undo and redo</a>），优化之后代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommandManager</span> </span>&#123;</span><br><span class="line">  _commandsList = [];</span><br><span class="line">  _currentCommand = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  execute(command) &#123;</span><br><span class="line">    command.execute();</span><br><span class="line">    <span class="keyword">this</span>._currentCommand++;</span><br><span class="line">    <span class="keyword">this</span>._commandsList[<span class="keyword">this</span>._currentCommand] = command;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._commandsList[<span class="keyword">this</span>._currentCommand + <span class="number">1</span>]) &#123;</span><br><span class="line">      <span class="keyword">this</span>._commandsList.splice(<span class="keyword">this</span>._currentCommand + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  undo() &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">this</span>._commandsList[<span class="keyword">this</span>._currentCommand];</span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">      command.undo();</span><br><span class="line">      <span class="keyword">this</span>._currentCommand--;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  redo() &#123;</span><br><span class="line">    <span class="keyword">const</span> command = <span class="keyword">this</span>._commandsList[<span class="keyword">this</span>._currentCommand + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">if</span> (command) &#123;</span><br><span class="line">      command.execute();</span><br><span class="line">      <span class="keyword">this</span>._currentCommand++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> CommandManager();</span><br></pre></td></tr></table></figure><p>OK，这就是我们的第二个版本了。</p><p>参考资料：</p><p>《Head First 设计模式 - 命令模式》</p><p><a href="https://segmentfault.com/a/1190000018940715" target="_blank" rel="noopener">javascript - 基于Web的svg编辑器（1）——撤销重做功能 - 个人文章 - SegmentFault 思否</a></p><p><a href="https://developer.s24.com/blog/js-command-pattern-for-undo-and-redo.html" target="_blank" rel="noopener">JavaScript command pattern for undo and redo (s24.com)</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前端 undo &amp;amp; redo 功能是非常常见的，通常会使用命令模式来实现。&lt;/p&gt;
&lt;p&gt;下面以一个低代码编辑器的例子，来介绍 JavaScript 是如何使用命令模式来实现 undo &amp;amp; redo 功能的。&lt;/p&gt;
&lt;p&gt;首先，我们来看一下命令模式的结构示
      
    
    </summary>
    
    
    
      <category term="设计模式" scheme="https://willxiao90.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="命令模式" scheme="https://willxiao90.github.io/tags/%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>UUID 全局唯一标识</title>
    <link href="https://willxiao90.github.io/2024/01/12/UUID%20%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/"/>
    <id>https://willxiao90.github.io/2024/01/12/UUID%20%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/</id>
    <published>2024-01-12T21:24:15.000Z</published>
    <updated>2024-07-21T02:38:05.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UUID"><a href="#UUID" class="headerlink" title="UUID"></a>UUID</h2><p>UUID 通用唯一识别码（Universally Unique Identifier）是用于计算机体系中以识别信息的一个128位标识符。</p><p>UUID按照标准方法生成时，在实际应用中具有唯一性，且不依赖中央机构的注册和分配。UUID重复的概率接近零，可以忽略不计。</p><p>因此，UUID 的应用非常普遍，例如被用作分布式数据库表的主键，微软的GUID(Globals Unique Identifiers)等等。</p><p>在其规范的文本表示中，UUID 的 16 个 8 位字节表示为 32 个十六进制数字，由连字符 ‘-‘ 分隔成五组显示，形式为“8-4-4-4-12”总共 36 个字符（32 个十六进制数字和 4 个连字符）。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">123e4567-e89b-12d3-a456-426655440000</span><br><span class="line">00000000-0000-0000-0000-000000000000</span><br></pre></td></tr></table></figure><p>它有多个不同的版本，比较常用的有v1、v3、v4、v5：</p><p>版本1的UUID是根据时间和节点ID（通常是MAC地址）生成；</p><p>版本3、版本5透过对命名空间（namespace）标识符和名称进行散列生成确定性的UUID；</p><p>版本4的UUID则使用随机性或伪随机性生成。</p><p><img src="/blog/images/image.png" alt="Alt text"></p><p>它的冲突概率非常小，以版本4的UUID为例，如果要有50%的几率至少发生一次冲突，需要生成至少 2.71E18 个UUID。计算如下：</p><p><img src="/blog/images/image-1.png" alt="Alt text"></p><p>这个数字相当于每秒产生 10 亿个 UUID 持续 85 年。</p><p>现代的浏览器提供了 crypto.randomUUID() 方法，可以非常方便的生成一个版本4的UUID。</p><p>或者你也可以使用第三方库 uuid 来生成 v1、v3、v4、v5 版本的 UUID。</p><h2 id="nanoid"><a href="#nanoid" class="headerlink" title="nanoid"></a>nanoid</h2><p>nanoid 是 UUID 的有力竞争者，它同样可以生成唯一的标识字符串。</p><p>与 UUID 相比，它使用更大的字母表，这样一来它生成的字符串长度更短，只有21个字符，并且它的包体积只有UUID的1/4。nanoid 大有取代 UUID 的趋势。</p><p><img src="/blog/images/image-2.png" alt="Alt text"></p><p>另外，nanoid 可以自定义字母表和ID长度，这给用户提供了更多灵活性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; customAlphabet &#125; <span class="keyword">from</span> <span class="string">'nanoid'</span></span><br><span class="line"><span class="keyword">const</span> nanoid = customAlphabet(<span class="string">'1234567890abcdef'</span>, <span class="number">10</span>)</span><br><span class="line">model.id = nanoid() <span class="comment">//=&gt; "4f90d13a42"</span></span><br></pre></td></tr></table></figure><h2 id="SHA-1"><a href="#SHA-1" class="headerlink" title="SHA-1"></a>SHA-1</h2><p>SHA-1（英语：Secure Hash Algorithm 1，中文名：安全散列算法1）是一种密码散列函数，美国国家安全局设计，并由美国国家标准技术研究所（NIST）发布为联邦数据处理标准（FIPS）。SHA-1可以生成一个被称为消息摘要的160位（20字节）散列值，散列值通常的呈现形式为40个十六进制数。</p><p>SHA-1 一种密码散列函数，密码散列函数的特性是，对任意一组输入数据进行计算，得到一个固定长度的输出摘要。如果输入相同一定会得到相同的输出，如果输入不同大概率会得到不同的输出。</p><p>它的主要目的是验证原始数据是否被篡改。主要应用有文件校验和（checkSum）、密码文本加密存储等等。</p><p>它其实也可以用作全局唯一标识符，它的长度160位，冲突的概率也非常小。因为相同的输入一定会产生相同的输出，所以它作为唯一标识符，是跟输入内容相关的，非常适合分布式开发。它在 git 中就有大量应用，git 中的对象唯一标识都是使用它生成的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;UUID&quot;&gt;&lt;a href=&quot;#UUID&quot; class=&quot;headerlink&quot; title=&quot;UUID&quot;&gt;&lt;/a&gt;UUID&lt;/h2&gt;&lt;p&gt;UUID 通用唯一识别码（Universally Unique Identifier）是用于计算机体系中以识别信息的一个12
      
    
    </summary>
    
    
    
      <category term="uuid" scheme="https://willxiao90.github.io/tags/uuid/"/>
    
      <category term="全局唯一标识" scheme="https://willxiao90.github.io/tags/%E5%85%A8%E5%B1%80%E5%94%AF%E4%B8%80%E6%A0%87%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>electron-vue 开发经验总结</title>
    <link href="https://willxiao90.github.io/2020/10/29/electron-vue%20%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>https://willxiao90.github.io/2020/10/29/electron-vue%20%E5%BC%80%E5%8F%91%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/</id>
    <published>2020-10-29T18:14:15.000Z</published>
    <updated>2024-07-21T02:38:05.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近公司让我开发一个桌面报警器，以解决浏览器页面关闭无法播放报警声音的问题。</p><p>接到这个项目，自然的选择了 <a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">electron-vue</a> 进行开发（我们公司使用的 vue）</p><p>现在有时间了，对项目中遇到的问题进行一个总结。</p></blockquote><h2 id="一、项目搭建-amp-打包"><a href="#一、项目搭建-amp-打包" class="headerlink" title="一、项目搭建 &amp; 打包"></a>一、项目搭建 &amp; 打包</h2><p>项目搭建比较简单，直接使用 electron-vue 的官方模板就可以生成项目，需要安装 vue-cli 命令行工具。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli &#x2F;&#x2F; 需要安装 vue-cli 脚手架</span><br><span class="line">vue init simulatedgreg&#x2F;electron-vue project-name &#x2F;&#x2F; 使用 electron-vue 官方模板生成项目</span><br><span class="line">npm install &#x2F;&#x2F; 安装依赖</span><br><span class="line">npm run dev &#x2F;&#x2F; 启动项目</span><br></pre></td></tr></table></figure><p>项目打包也比较简单，可能也是因为我的项目本身不复杂吧。普通打包执行 npm run build 即可，如果要打包成免安装文件，执行 npm run build:dir，非常方便！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run build &#x2F;&#x2F; 打包成可执行文件</span><br><span class="line">npm run build:dir &#x2F;&#x2F; 打包成免安装文件</span><br></pre></td></tr></table></figure><h2 id="二、状态管理"><a href="#二、状态管理" class="headerlink" title="二、状态管理"></a>二、状态管理</h2><p>因为 electron 每个网页都在自己的渲染进程（renderer process）中运行，所以如果要在多个渲染进程间共享状态，就不能直接使用 vuex 了。</p><p><a href="https://github.com/vue-electron/vuex-electron" target="_blank" rel="noopener">vuex-electron</a> 这个开源库为我们提供了，在多个进程间共享状态的方案（包括主进程）。</p><p>如果需要在多个进程间共享状态，需要使用 createSharedMutations 中间件。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// store.js 文件</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> &#123; createPersistedState, createSharedMutations &#125; <span class="keyword">from</span> <span class="string">"vuex-electron"</span></span><br><span class="line"> </span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  plugins: [</span><br><span class="line">    createPersistedState(),</span><br><span class="line">    createSharedMutations() <span class="comment">// 用于多个进程共享状态，包括主进程</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并在主进程中引入 store 文件。这里有点坑，最开始的时候我不知道要在 main.js 中引入 store 文件，结果状态一直无法更新，又没有任何报错，调试了一下午😓</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./path/to/your/store'</span> <span class="comment">// 需要在主进程引入 store ，否则状态无法更新</span></span><br></pre></td></tr></table></figure><p>另外，使用 createSharedMutations 中间件，必须使用 dispatch 或 mapActions 更新状态，不能使用 commit 。</p><p>阅读 vuex-electron 的源代码，发现渲染进程对 dispatch 进行了重写，dispatch 只是通知主进程，而不实际更新 store，主进程收到 action 之后，立即更新自己的 store，主进程 store 更新成功之后，会通知所有的渲染进程，这个时候渲染进程才调用 originalCommit 更新自己的 store。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">rendererProcessLogic() &#123;</span><br><span class="line">    <span class="comment">// Connect renderer to main process</span></span><br><span class="line">    <span class="keyword">this</span>.connect()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save original Vuex methods</span></span><br><span class="line">    <span class="keyword">this</span>.store.originalCommit = <span class="keyword">this</span>.store.commit</span><br><span class="line">    <span class="keyword">this</span>.store.originalDispatch = <span class="keyword">this</span>.store.dispatch</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Don't use commit in renderer outside of actions</span></span><br><span class="line">    <span class="keyword">this</span>.store.commit = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">`[Vuex Electron] Please, don't use direct commit's, use dispatch instead of this.`</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Forward dispatch to main process</span></span><br><span class="line">    <span class="keyword">this</span>.store.dispatch = <span class="function">(<span class="params">type, payload</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 只是通知主进程，没有更新 store</span></span><br><span class="line">        <span class="keyword">this</span>.notifyMain(&#123; type, payload &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subscribe on changes from main process and apply them</span></span><br><span class="line">    <span class="keyword">this</span>.onNotifyRenderers(<span class="function">(<span class="params">event, &#123; type, payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 渲染进程真正更新自己的 store</span></span><br><span class="line">        <span class="keyword">this</span>.store.originalCommit(type, payload)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 省略其他代码</span></span><br><span class="line"></span><br><span class="line">mainProcessLogic() &#123;</span><br><span class="line">    <span class="keyword">const</span> connections = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Save new connection</span></span><br><span class="line">    <span class="keyword">this</span>.onConnect(<span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> win = event.sender</span><br><span class="line">        <span class="keyword">const</span> winId = win.id</span><br><span class="line"></span><br><span class="line">        connections[winId] = win</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Remove connection when window is closed</span></span><br><span class="line">        win.on(<span class="string">"destroyed"</span>, () =&gt; &#123;</span><br><span class="line">        <span class="keyword">delete</span> connections[winId]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subscribe on changes from renderer processes</span></span><br><span class="line">    <span class="keyword">this</span>.onNotifyMain(<span class="function">(<span class="params">event, &#123; type, payload &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 主进程更新了自己的 store</span></span><br><span class="line">        <span class="keyword">this</span>.store.dispatch(type, payload)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Subscribe on changes from Vuex store</span></span><br><span class="line">    <span class="keyword">this</span>.store.subscribe(<span class="function">(<span class="params">mutation</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; type, payload &#125; = mutation</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主进程更新成功之后，通知所有渲染进程</span></span><br><span class="line">        <span class="keyword">this</span>.notifyRenderers(connections, &#123; type, payload &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，渲染进程真正更新 store 用的 originalCommit 方法，而不是 originalDispatch 方法，其实 originalDispatch 只是个代理，每一个 mutations 都需要写一个同名的 actions 方法，接收相同的参数，如下面的官方样例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">"vue"</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">"vuex"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPersistedState, createSharedMutations &#125; <span class="keyword">from</span> <span class="string">"vuex-electron"</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  actions: &#123;</span><br><span class="line">    increment(store) &#123;</span><br><span class="line">      <span class="comment">// 按照推理，这里的 commit 其实不起作用，不是必须</span></span><br><span class="line">      <span class="comment">// 关键是名称相同</span></span><br><span class="line">      store.commit(<span class="string">"increment"</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(store) &#123;</span><br><span class="line">      store.commit(<span class="string">"decrement"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  mutations: &#123;</span><br><span class="line">    increment(state) &#123;</span><br><span class="line">      state.count++</span><br><span class="line">    &#125;,</span><br><span class="line">    decrement(state) &#123;</span><br><span class="line">      state.count--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  plugins: [createPersistedState(), createSharedMutations()],</span><br><span class="line">  strict: process.env.NODE_ENV !== <span class="string">"production"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>事实上，如果应用很简单，比如我的项目只有一个窗口，就不存在共享状态的问题，所以完全可以不用 createSharedMutations 中间件，也不用在 main.js 中引入 store 文件，store 所有用法就跟 vuex 一样了。</p><h2 id="三、日志"><a href="#三、日志" class="headerlink" title="三、日志"></a>三、日志</h2><p>日志我采用的是 <a href="https://github.com/megahertz/electron-log" target="_blank" rel="noopener">electron-log</a>，也可以用 <a href="https://github.com/log4js-node/log4js-node" target="_blank" rel="noopener">log4js</a></p><p>在主进程中使用 electron-log 很简单，直接引入，调用 info 等方法即可。<br>electron-log 提供了 error, warn, info, verbose, debug, silly 六种级别的日志，默认都是开启。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">'electron-log'</span>;</span><br><span class="line"> </span><br><span class="line">log.info(<span class="string">'client 启动成功'</span>);</span><br><span class="line">log.error(<span class="string">'主进程出错'</span>);</span><br></pre></td></tr></table></figure><p>在渲染进程使用 electron-log，可以覆盖 console.log 等方法，这样就不用到处引入 electron-log 了，需要写日志的地方直接使用 console.log 等方法即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> log <span class="keyword">from</span> <span class="string">'electron-log'</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 覆盖 console 的 log、error、debug 三个方法</span></span><br><span class="line"><span class="built_in">console</span>.log = log.log;</span><br><span class="line"><span class="built_in">Object</span>.assign(<span class="built_in">console</span>, &#123;</span><br><span class="line">  error: log.error,</span><br><span class="line">  debug: log.debug,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 之后，就可以直接使用 console 收集日志</span></span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">'渲染进程出错'</span>)</span><br></pre></td></tr></table></figure><p>electron-log 默认会打印到 console 控制台，并写入到本地文件，本地文件路径如下：</p><ul><li>on Linux: ~/.config/{app name}/logs/{process type}.log</li><li>on macOS: ~/Library/Logs/{app name}/{process type}.log</li><li>on Windows: %USERPROFILE%\AppData\Roaming{app name}\logs{process type}.log</li></ul><hr><p>如果使用 log4js 的话，配置相对复杂一点，需要注意的是文件不能直接写到当前目录，而是要使用 app.getPath(‘logs’) 获取应用程序日志文件夹路径，否则打包之后无法生成日志文件。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> log4js <span class="keyword">from</span> <span class="string">'log4js'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 注意：这里必须使用 app.getPath('logs') 获取日志文件夹路径</span></span><br><span class="line">log4js.configure(&#123;</span><br><span class="line">  appenders: &#123; <span class="attr">cheese</span>: &#123; <span class="attr">type</span>: <span class="string">'file'</span>, <span class="attr">filename</span>: app.getPath(<span class="string">'logs'</span>) + <span class="string">'/cheese.log'</span> &#125; &#125;,</span><br><span class="line">  categories: &#123; <span class="attr">default</span>: &#123; <span class="attr">appenders</span>: [<span class="string">'cheese'</span>], <span class="attr">level</span>: <span class="string">'error'</span> &#125; &#125;</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> logger = log4js.getLogger(<span class="string">'cheese'</span>)</span><br><span class="line">logger.trace(<span class="string">'Entering cheese testing'</span>)</span><br><span class="line">logger.debug(<span class="string">'Got cheese.'</span>)</span><br><span class="line">logger.info(<span class="string">'Cheese is Comté.'</span>)</span><br><span class="line">logger.warn(<span class="string">'Cheese is quite smelly.'</span>)</span><br><span class="line">logger.error(<span class="string">'Cheese is too ripe!'</span>)</span><br><span class="line">logger.fatal(<span class="string">'Cheese was breeding ground for listeria.'</span>)</span><br></pre></td></tr></table></figure><h2 id="四、其他问题"><a href="#四、其他问题" class="headerlink" title="四、其他问题"></a>四、其他问题</h2><p>1.修改系统托盘图标，下面代码参考了：<a href="https://juejin.im/post/6844903872905871373" target="_blank" rel="noopener">https://juejin.im/post/6844903872905871373</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tray;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createTray</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> iconUrl = path.join(__static, <span class="string">'/app-icon.png'</span>);</span><br><span class="line">  <span class="keyword">const</span> appIcon = nativeImage.createFromPath(iconUrl);</span><br><span class="line">  tray = <span class="keyword">new</span> Tray(appIcon);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> contextMenu = Menu.buildFromTemplate([</span><br><span class="line">    &#123;</span><br><span class="line">      label: <span class="string">'显示主界面'</span>,</span><br><span class="line">      click: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">          mainWindow.show();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">label</span>: <span class="string">'退出程序'</span>, <span class="attr">role</span>: <span class="string">'quit'</span> &#125;,</span><br><span class="line">  ]);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">const</span> appName = app.getName();</span><br><span class="line">  tray.setToolTip(appName);</span><br><span class="line">  tray.setContextMenu(contextMenu);</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">  ipcMain.on(<span class="string">'newMessage'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 图标闪烁</span></span><br><span class="line">    timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      count += <span class="number">1</span>;</span><br><span class="line">      <span class="keyword">if</span> (count % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">        tray.setImage(appIcon);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个空的 nativeImage 实例</span></span><br><span class="line">        tray.setImage(nativeImage.createEmpty());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">      tray.setToolTip(<span class="string">'您有一条新消息'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"> </span><br><span class="line">  tray.on(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (mainWindow) &#123;</span><br><span class="line">      mainWindow.show();</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        clearInterval(timer);</span><br><span class="line">        tray.setImage(appIcon);</span><br><span class="line">        tray.setToolTip(appName);</span><br><span class="line">        timer = <span class="literal">undefined</span>;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.播放声音</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">audio = <span class="keyword">new</span> Audio(<span class="string">'static/alarm.wav'</span>);</span><br><span class="line">audio.play(); <span class="comment">// 开始播放</span></span><br><span class="line">audio.pause(); <span class="comment">// 暂停</span></span><br></pre></td></tr></table></figure><p>3.显示通知消息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> notify = <span class="keyword">new</span> Notification(<span class="string">'标题'</span>, &#123;</span><br><span class="line">   tag: <span class="string">'唯一标识'</span>, <span class="comment">// 相同 tag 只会显示一个通知</span></span><br><span class="line">   body: <span class="string">'描述信息'</span>,</span><br><span class="line">   icon: <span class="string">'图标地址'</span>,</span><br><span class="line">   requireInteraction: <span class="literal">true</span>, <span class="comment">// 要求用户有交互才关闭（实测无效）</span></span><br><span class="line">   data, <span class="comment">// 其他数据</span></span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 通知消息被点击事件</span></span><br><span class="line">notify.onclick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="built_in">console</span>.log(notify.data)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>4.隐藏顶部菜单栏</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Menu &#125; <span class="keyword">from</span> <span class="string">'electron'</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 隐藏顶部菜单</span></span><br><span class="line"> Menu.setApplicationMenu(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure><h2 id="五、参考资料"><a href="#五、参考资料" class="headerlink" title="五、参考资料"></a>五、参考资料</h2><ul><li>electron 官方文档：<a href="https://www.electronjs.org/docs" target="_blank" rel="noopener">https://www.electronjs.org/docs</a></li><li>electron-vue 文档：<a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">https://simulatedgreg.gitbooks.io/electron-vue/content/cn/</a></li><li>electron系统托盘及消息闪动提示：<a href="https://juejin.im/post/6844903872905871373" target="_blank" rel="noopener">https://juejin.im/post/6844903872905871373</a></li></ul><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近公司让我开发一个桌面报警器，以解决浏览器页面关闭无法播放报警声音的问题。&lt;/p&gt;
&lt;p&gt;接到这个项目，自然的选择了 &lt;a href=&quot;https://simulatedgreg.gitbooks.io/electron-vue/content/
      
    
    </summary>
    
    
    
      <category term="electron" scheme="https://willxiao90.github.io/tags/electron/"/>
    
      <category term="electron-vue" scheme="https://willxiao90.github.io/tags/electron-vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue 与 React 的区别</title>
    <link href="https://willxiao90.github.io/2020/06/29/Vue%20%E4%B8%8E%20React%20%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>https://willxiao90.github.io/2020/06/29/Vue%20%E4%B8%8E%20React%20%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-06-29T10:19:26.000Z</published>
    <updated>2024-07-21T02:38:05.765Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue 与 React 有什么区别？</p></blockquote><p>这是前端开发同学面试时经常遇到的问题。</p><p>我最开始接触的是 React，对 Vue 的理解一直比较片面，感觉 Vue 要学很多 html 指令，很不习惯，也没觉得 Vue 比 React 有什么优势。</p><p>直到现在，使用了 Vue 一年之后，对 Vue 有了更多感受，也消除了一些刻板印象。</p><p>首先，这两个框架都是非常优秀的，它们其实非常相似，都有以下特性：</p><ol><li>响应式（Reactive）。两个框架都是一种类似 VM 的架构，将状态从视图层分离出来，开发者只需要关注业务逻辑，不需要直接操作 DOM 。当应用发生改变时，我们只需要更新状态即可，框架会自动帮我们重新渲染页面。</li><li>组件化（Composable）。一个页面，可以拆分成一棵嵌套的组件树，我们只需要开发一个个组件即可，同一个组件可以在多个地方使用，这样就提升了代码的复用性和可维护性。</li><li>Virtual DOM。框架在操作真实 DOM 之前，会先在内存中生成虚拟 DOM，最后再批量操作真实 DOM，以提高性能。</li></ol><p>至于它们的区别，我个人理解，最大的有以下三点：</p><ol><li>响应式原理不同；</li><li>Vue 推荐使用模版的方式定义组件，React 推荐使用 JSX；</li><li>React 推荐使用不可变的数据；</li></ol><p>当然它们肯定还有其他区别，比如代码实现、状态管理等，但上面这三点是它们比较大的区别，是框架有意为之的，对日常的开发和理解影响也是比较大的。</p><h2 id="一、响应式原理不同"><a href="#一、响应式原理不同" class="headerlink" title="一、响应式原理不同"></a>一、响应式原理不同</h2><p>Vue 使用观察者模式自动跟踪数据的变化，自动更新组件。</p><p>Vue 会遍历 data 数据对象，使用 Object.defineProperty() 将每个属性都转换为 getter/setter。每个 Vue 组件实例都有一个对应的  watcher  实例，在组件初次渲染（render）时，会记录组件用到了（调用 getter）哪些数据。当数据发生改变时，会触发 setter 方法，并通知所有依赖这个数据的 watcher 实例，然后 watcher 实例调用对应组件的 render 方法，生成一颗新的 vdom 树，Vue 会将新生成的 vdom 树与上一次生成的 vdom 树进行比较（diff），来决定具体要更新哪些 dom。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6af41181deba4e40b4dcd1667cce42fd~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><hr><p>React 必须显式调用 setState() 方法更新状态，状态更新之后，组件也会重新渲染。</p><p>Vue 和 React 在状态更新之后，都会生成一颗新的虚拟 dom 树，与上一颗虚拟 dom 树进行比较（diff），找出其中的差异，再更新真实 dom。这个虚拟 dom diff 算法，Vue 与 React 差异其实并不大，基本思想是差不多的。大家可以看看网上的文章，我这里就不展开了。</p><h2 id="二、Vue-推荐使用-template-定义组件，React-推荐使用-JSX"><a href="#二、Vue-推荐使用-template-定义组件，React-推荐使用-JSX" class="headerlink" title="二、Vue 推荐使用 template 定义组件，React 推荐使用 JSX"></a>二、Vue 推荐使用 template 定义组件，React 推荐使用 JSX</h2><p>Vue 推荐使用 template 的方式定义组件，因为这样更接近原生 html，可以在不破坏原有 html 代码的基础上引入 Vue 的能力。Vue 的组件也参考了一些 Web Component 的规范，Vue 的组件可以很容易打包成 Web Component。</p><p>React 推荐使用 JSX，JSX 是使用 JS 的语法来编写 html 代码，所以一些流程控制，数据绑定也会更加方便。也不需要再学一套模板语法。</p><p>事实上 Vue 也提供了 JSX 的支持，不过 Vue 更推荐 template 的方式。</p><h2 id="三、React-推荐使用不可变的数据"><a href="#三、React-推荐使用不可变的数据" class="headerlink" title="三、React 推荐使用不可变的数据"></a>三、React 推荐使用不可变的数据</h2><p>这一点对于从 Vue 转换到 React 的同学，需要特别注意。</p><p>所谓不可变的数据，就是当我们要改变一个数据对象时，不要直接修改原数据对象，而是返回一个新的数据对象。比如使用 Object.assign() 方法修改数据属性:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;</span><br><span class="line">  fontSize: <span class="number">14</span>,</span><br><span class="line">  color: <span class="string">"black"</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newData = <span class="built_in">Object</span>.assign(&#123;&#125;, data, &#123; <span class="attr">color</span>: <span class="string">"blue"</span> &#125;);</span><br></pre></td></tr></table></figure><p>之所以推荐使用不可变的数据，一个原因是使用不可变的数据，可以更容易的实现“时间旅行”功能。但是更重要的一个原因是可以更容易的实现 pure component。</p><p>当一个组件的状态发生改变时，React 会重新调用 render() 方法，比较生成的 VDOM 的差别。如果一个子组件的 proos 和 state 都没有改变，React 仍然需要进行一次对比，这个情况就有点儿浪费了。所以 React 提供了 shouldComponentUpdate() 生命周期函数，允许开发者判断什么时候应该更新组件，比如当组件的 props 和 state 都没有改变的时候，shouldComponentUpdate 就可以返回 false，那么 React 就不会再去比较 VDOM 的差异了。</p><p>React.PureComponent 类，实现了 shouldComponentUpdate 方法，会对 props 和 state 进行浅比较，如果没有变化，就返回 false 跳过组件更新。但是它只进行浅比较，所以如果直接修改了 props 或 state 的属性，shouldComponentUpdate 方法还是返回 false，就漏掉了这次更新。所以这种情况下，推荐使用不可变的数据。</p><p>更多信息请看官方文档：<a href="https://zh-hans.reactjs.org/tutorial/tutorial.html#why-immutability-is-important" target="_blank" rel="noopener">为什么不可变性在 React 中非常重要</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Vue 与 React 有什么区别？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是前端开发同学面试时经常遇到的问题。&lt;/p&gt;
&lt;p&gt;我最开始接触的是 React，对 Vue 的理解一直比较片面，感觉 Vue 要学很多 html 指令，很不习惯，也
      
    
    </summary>
    
    
    
      <category term="vue" scheme="https://willxiao90.github.io/tags/vue/"/>
    
      <category term="react" scheme="https://willxiao90.github.io/tags/react/"/>
    
  </entry>
  
</feed>
